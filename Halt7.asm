; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27049.0 

	TITLE	D:\__HP_Stream\__NLU_Notes\__Work_In_Progress\__Halt_Decider_X86\___x86utm_VS\Halt7.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_BEGIN
PUBLIC	_Heap_PTR
PUBLIC	_Heap_END
PUBLIC	_END
_DATA	SEGMENT
_BEGIN	DB	'BEGIN STATIC DATA', 00H
	ORG $+2
_Heap_PTR DD	011111111H
_Heap_END DD	022222222H
_END	DB	'END STATIC DATA', 00H
_DATA	ENDS
PUBLIC	_OutputString
PUBLIC	_Output
PUBLIC	_Allocate
PUBLIC	_SaveState
PUBLIC	_LoadState
PUBLIC	_DebugStep
PUBLIC	_PushBack
PUBLIC	_StackPush
PUBLIC	_get_code_end
PUBLIC	_Last_Address_Of_Operating_System
PUBLIC	_Output_Decoded
PUBLIC	_CopyMachineCode
PUBLIC	_Infinite_Loop_Needs_To_Be_Aborted_Trace
PUBLIC	_Infinite_Recursion_Needs_To_Be_Aborted_Trace
PUBLIC	_Infinite_Simulation_Needs_To_Be_Aborted_Trace0
PUBLIC	_Needs_To_Be_Aborted0
PUBLIC	_Decide_Halting0
PUBLIC	_Init_slave_state0
PUBLIC	_Infinite_Simulation_Needs_To_Be_Aborted_Trace
PUBLIC	_Needs_To_Be_Aborted
PUBLIC	_Decide_Halting
PUBLIC	_Init_slave_state
PUBLIC	_Needs_To_Be_Aborted_Trace_HH
PUBLIC	_Needs_To_Be_Aborted_HH
PUBLIC	_Decide_Halting_HH
PUBLIC	_Init_Halts_HH
PUBLIC	_HH1
PUBLIC	_HH
PUBLIC	_HHH1
PUBLIC	_HHH
PUBLIC	_Address_of_Sipser_H
PUBLIC	_H1
PUBLIC	_H
PUBLIC	_Sipser_H
PUBLIC	_Kozen_K
PUBLIC	_H0
PUBLIC	_T
PUBLIC	_Halts
PUBLIC	_Infinite_Loop2
PUBLIC	_Infinite_Loop3
PUBLIC	_Add3
PUBLIC	_HR
PUBLIC	_PR
PUBLIC	_Simulate
PUBLIC	_Py
PUBLIC	_Pz
PUBLIC	_Px
PUBLIC	_Kozen_N
PUBLIC	_P
PUBLIC	_E
PUBLIC	_D0
PUBLIC	_X
PUBLIC	_Y
PUBLIC	_B
PUBLIC	_Infinite_Recursion3
PUBLIC	_Infinite_Recursion2
PUBLIC	_factorial
PUBLIC	_This_Halts
PUBLIC	_Recursion_Chain_01
PUBLIC	_Recursion_Chain_02
PUBLIC	_Recursion_Chain_03
PUBLIC	_D
PUBLIC	_PP
PUBLIC	_HHHxyz
PUBLIC	_Strachey_P
PUBLIC	_Infinite_Recursion
PUBLIC	_Infinite_Loop
PUBLIC	_DD
PUBLIC	_Sipser_D
PUBLIC	_DDD
PUBLIC	_main
_DATA	SEGMENT
$SG9419	DB	'source[N]: ', 00H
$SG9420	DB	'CopyMachineCode destination[-1]: ', 00H
	ORG $+2
$SG9421	DB	'CopyMachineCode destination[-2]: ', 00H
	ORG $+2
$SG9542	DB	'Infinite Loop Detected Simulation Stopped', 0aH, 0aH, 00H
$SG9544	DB	'Infinite Recursion Detected Simulation Stopped', 0aH, 0aH
	DB	00H
	ORG $+3
$SG9546	DB	'Simulation Detected Simulation Stopped', 0aH, 0aH, 00H
	ORG $+3
$SG9645	DB	'Infinite Loop Detected Simulation Stopped', 0aH, 0aH, 00H
$SG9647	DB	'Infinite Recursion Detected Simulation Stopped', 0aH, 0aH
	DB	00H
	ORG $+3
$SG9649	DB	'Recursive Simulation Detected Simulation Stopped', 0aH, 0aH
	DB	00H
	ORG $+1
$SG9687	DB	'Local Halt Decider: Infinite Loop Detected Simulation St'
	DB	'opped', 0aH, 0aH, 00H
$SG9693	DB	'Local Halt Decider: Infinite Recursion Detected Simulati'
	DB	'on Stopped', 0aH, 0aH, 00H
	ORG $+3
$SG9774	DB	'New slave_stack at:', 00H
$SG9916	DB	0aH, 'H1: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+1
$SG9776	DB	0aH, 'Begin Local Halt Decider Simulation   Execution Tra'
	DB	'ce Stored at:', 00H
	ORG $+2
$SG9917	DB	'Address_of_H1:', 00H
	ORG $+1
$SG9919	DB	'H1: ', 00H
	ORG $+3
$SG9920	DB	'H1: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
	ORG $+3
$SG9954	DB	0aH, 'H: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+2
$SG9955	DB	'Address_of_H:', 00H
	ORG $+2
$SG9957	DB	'H: ', 00H
$SG9958	DB	'H: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
$SG9992	DB	0aH, 'Sipser_H: Begin Simulation   Execution Trace Stored'
	DB	' at:', 00H
	ORG $+3
$SG9993	DB	'Address_of_Sipser_H:', 00H
	ORG $+3
$SG9995	DB	'Sipser_H: ', 00H
	ORG $+1
$SG9996	DB	'Sipser_H: End Simulation   Input Terminated Normally', 0aH
	DB	0aH, 00H
	ORG $+1
$SG10030 DB	0aH, 'H: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+2
$SG10031 DB	'Address_of_Kozen_K:', 00H
$SG10033 DB	'Kozen_K: ', 00H
	ORG $+2
$SG10034 DB	'Kozen_K: End Simulation   Input Terminated Normally', 0aH
	DB	0aH, 00H
	ORG $+2
$SG10061 DB	0aH, 'H0: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+1
$SG10062 DB	'Address_of_H0:', 00H
	ORG $+1
$SG10064 DB	'H0: ', 00H
	ORG $+3
$SG10065 DB	'H: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
$SG10092 DB	0aH, 'T: Begin Simulation   Execution Trace Stored at:', 00H
	ORG $+2
$SG10093 DB	'Address_of_T:', 00H
	ORG $+2
$SG10095 DB	'T: ', 00H
$SG10096 DB	'H: End Simulation   Input Terminated Normally', 0aH, 0aH
	DB	00H
$SG10266 DB	'Input_Halts = ', 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_main	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1373
	push	ebp
	mov	ebp, esp
; Line 1377
	push	OFFSET _DDD
	call	_HHH
	add	esp, 4
	push	eax
	push	OFFSET $SG10266
	call	_Output
	add	esp, 8
; Line 1382
	xor	eax, eax
; Line 1383
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_DDD	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1367
	push	ebp
	mov	ebp, esp
; Line 1368
	push	OFFSET _DDD
	call	_HHH
	add	esp, 4
; Line 1370
	pop	ebp
	ret	0
_DDD	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_Sipser_D PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1354
	push	ebp
	mov	ebp, esp
; Line 1355
	mov	eax, DWORD PTR _M$[ebp]
	push	eax
	mov	ecx, DWORD PTR _M$[ebp]
	push	ecx
	call	_HH
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Sipser_D
; Line 1356
	xor	eax, eax
	jmp	SHORT $LN1@Sipser_D
$LN2@Sipser_D:
; Line 1357
	mov	eax, 1
$LN1@Sipser_D:
; Line 1358
	pop	ebp
	ret	0
_Sipser_D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_DD	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1346
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1347
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_HH
	add	esp, 8
	mov	DWORD PTR _Halt_Status$[ebp], eax
; Line 1348
	cmp	DWORD PTR _Halt_Status$[ebp], 0
	je	SHORT $LN2@DD
$HERE$4:
; Line 1349
	jmp	SHORT $HERE$4
$LN2@DD:
; Line 1350
	mov	eax, DWORD PTR _Halt_Status$[ebp]
; Line 1351
	mov	esp, ebp
	pop	ebp
	ret	0
_DD	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Loop PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1339
	push	ebp
	mov	ebp, esp
$HERE$3:
; Line 1340
	jmp	SHORT $HERE$3
; Line 1342
	pop	ebp
	ret	0
_Infinite_Loop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Recursion PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1334
	push	ebp
	mov	ebp, esp
; Line 1335
	call	_Infinite_Recursion
; Line 1336
	pop	ebp
	ret	0
_Infinite_Recursion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Strachey_P PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1328
	push	ebp
	mov	ebp, esp
$L$4:
; Line 1329
	push	OFFSET _Strachey_P
	call	_HHH
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@Strachey_P
	jmp	SHORT $L$4
$LN1@Strachey_P:
; Line 1331
	pop	ebp
	ret	0
_Strachey_P ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_HHHxyz	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1318
	push	ebp
	mov	ebp, esp
; Line 1319
	mov	eax, DWORD PTR _I$[ebp]
	push	eax
	call	DWORD PTR _P$[ebp]
	add	esp, 4
; Line 1320
	pop	ebp
	ret	0
_HHHxyz	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_PP	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1309
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1310
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_HH
	add	esp, 8
	mov	DWORD PTR _Halt_Status$[ebp], eax
; Line 1311
	cmp	DWORD PTR _Halt_Status$[ebp], 0
	je	SHORT $LN2@PP
$HERE$4:
; Line 1312
	jmp	SHORT $HERE$4
$LN2@PP:
; Line 1313
	mov	eax, DWORD PTR _Halt_Status$[ebp]
; Line 1314
	mov	esp, ebp
	pop	ebp
	ret	0
_PP	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_D	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1300
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1301
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_H
	add	esp, 8
	mov	DWORD PTR _Halt_Status$[ebp], eax
; Line 1302
	cmp	DWORD PTR _Halt_Status$[ebp], 0
	je	SHORT $LN2@D
$HERE$4:
; Line 1303
	jmp	SHORT $HERE$4
$LN2@D:
; Line 1304
	mov	eax, DWORD PTR _Halt_Status$[ebp]
; Line 1305
	mov	esp, ebp
	pop	ebp
	ret	0
_D	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_Recursion_Chain_03 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1283
	push	ebp
	mov	ebp, esp
; Line 1284
	mov	eax, DWORD PTR _M$[ebp]
	push	eax
	call	_Recursion_Chain_01
	add	esp, 4
; Line 1285
	pop	ebp
	ret	0
_Recursion_Chain_03 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_Recursion_Chain_02 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1288
	push	ebp
	mov	ebp, esp
; Line 1289
	mov	eax, DWORD PTR _M$[ebp]
	push	eax
	call	_Recursion_Chain_03
	add	esp, 4
; Line 1290
	pop	ebp
	ret	0
_Recursion_Chain_02 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_M$ = 8							; size = 4
_Recursion_Chain_01 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1293
	push	ebp
	mov	ebp, esp
; Line 1294
	mov	eax, DWORD PTR _M$[ebp]
	push	eax
	call	_Recursion_Chain_02
	add	esp, 4
; Line 1295
	pop	ebp
	ret	0
_Recursion_Chain_01 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_This_Halts PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1274
	push	ebp
	mov	ebp, esp
; Line 1276
	pop	ebp
	ret	0
_This_Halts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_n$ = 8							; size = 4
_factorial PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1264
	push	ebp
	mov	ebp, esp
; Line 1266
	cmp	DWORD PTR _n$[ebp], 1
	jl	SHORT $LN2@factorial
; Line 1267
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	push	eax
	call	_factorial
	add	esp, 4
	imul	eax, DWORD PTR _n$[ebp]
	jmp	SHORT $LN1@factorial
	jmp	SHORT $LN1@factorial
$LN2@factorial:
; Line 1269
	mov	eax, 1
$LN1@factorial:
; Line 1270
	pop	ebp
	ret	0
_factorial ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_N$ = 8							; size = 4
_Infinite_Recursion2 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1259
	push	ebp
	mov	ebp, esp
; Line 1260
	mov	eax, DWORD PTR _N$[ebp]
	push	eax
	push	OFFSET _Infinite_Recursion2
	call	_H
	add	esp, 8
; Line 1261
	pop	ebp
	ret	0
_Infinite_Recursion2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_N$ = 8							; size = 4
_Infinite_Recursion3 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1254
	push	ebp
	mov	ebp, esp
; Line 1255
	mov	eax, DWORD PTR _N$[ebp]
	push	eax
	call	_Infinite_Recursion3
	add	esp, 4
; Line 1256
	pop	ebp
	ret	0
_Infinite_Recursion3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_B	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1248
	push	ebp
	mov	ebp, esp
; Line 1249
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_H
	add	esp, 8
; Line 1251
	pop	ebp
	ret	0
_B	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_P$ = 8							; size = 4
_Y	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1242
	push	ebp
	mov	ebp, esp
; Line 1243
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	call	_X
	add	esp, 8
; Line 1244
	mov	eax, 1
; Line 1245
	pop	ebp
	ret	0
_Y	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_X	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1236
	push	ebp
	mov	ebp, esp
; Line 1237
	mov	eax, DWORD PTR _I$[ebp]
	push	eax
	call	DWORD PTR _P$[ebp]
	add	esp, 4
; Line 1238
	xor	eax, eax
; Line 1239
	pop	ebp
	ret	0
_X	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_D0	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1227
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1228
	push	OFFSET _D0
	call	_H0
	add	esp, 4
	mov	DWORD PTR _Halt_Status$[ebp], eax
; Line 1229
	cmp	DWORD PTR _Halt_Status$[ebp], 0
	je	SHORT $LN2@D0
$HERE$4:
; Line 1230
	jmp	SHORT $HERE$4
$LN2@D0:
; Line 1231
	mov	eax, DWORD PTR _Halt_Status$[ebp]
; Line 1232
	mov	esp, ebp
	pop	ebp
	ret	0
_D0	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_E	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1221
	push	ebp
	mov	ebp, esp
; Line 1222
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_H
	add	esp, 8
; Line 1223
	pop	ebp
	ret	0
_E	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_P	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1213
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1214
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_H
	add	esp, 8
	mov	DWORD PTR _Halt_Status$[ebp], eax
; Line 1215
	cmp	DWORD PTR _Halt_Status$[ebp], 0
	je	SHORT $LN1@P
$HERE$4:
; Line 1216
	jmp	SHORT $HERE$4
$LN1@P:
; Line 1218
	mov	esp, ebp
	pop	ebp
	ret	0
_P	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Kozen_N PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1205
	push	ebp
	mov	ebp, esp
; Line 1206
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_Kozen_K
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@Kozen_N
$HERE$4:
; Line 1207
	jmp	SHORT $HERE$4
$LN2@Kozen_N:
; Line 1208
	mov	eax, 1
; Line 1209
	pop	ebp
	ret	0
_Kozen_N ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Px	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1194
	push	ebp
	mov	ebp, esp
; Line 1195
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_H
	add	esp, 8
; Line 1197
	pop	ebp
	ret	0
_Px	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Pz	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1189
	push	ebp
	mov	ebp, esp
; Line 1190
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_Simulate
	add	esp, 8
; Line 1191
	pop	ebp
	ret	0
_Pz	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Halt_Status$ = -4					; size = 4
_x$ = 8							; size = 4
_Py	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1181
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1182
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_Simulate
	add	esp, 8
	mov	DWORD PTR _Halt_Status$[ebp], eax
; Line 1183
	cmp	DWORD PTR _Halt_Status$[ebp], 0
	je	SHORT $LN1@Py
$HERE$4:
; Line 1184
	jmp	SHORT $HERE$4
$LN1@Py:
; Line 1186
	mov	esp, ebp
	pop	ebp
	ret	0
_Py	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_Simulate PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1174
	push	ebp
	mov	ebp, esp
; Line 1175
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	call	DWORD PTR _x$[ebp]
	add	esp, 4
; Line 1176
	mov	eax, 1
; Line 1177
	pop	ebp
	ret	0
_Simulate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_PR	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1157
	push	ebp
	mov	ebp, esp
; Line 1158
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_HR
	add	esp, 4
; Line 1159
	pop	ebp
	ret	0
_PR	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_y$ = 8							; size = 4
_HR	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1162
	push	ebp
	mov	ebp, esp
; Line 1163
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	call	_PR
	add	esp, 4
; Line 1164
	pop	ebp
	ret	0
_HR	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_Add3	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1150
	push	ebp
	mov	ebp, esp
; Line 1151
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 3
; Line 1152
	pop	ebp
	ret	0
_Add3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Loop3 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1142
	push	ebp
	mov	ebp, esp
$L1$3:
; Line 1143
	jmp	SHORT $L3$4
$L2$5:
; Line 1144
	jmp	SHORT $L4$6
$L3$4:
; Line 1145
	jmp	SHORT $L2$5
$L4$6:
; Line 1147
	pop	ebp
	ret	0
_Infinite_Loop3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Infinite_Loop2 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1136
	push	ebp
	mov	ebp, esp
$L1$3:
; Line 1137
	jmp	SHORT $L3$4
$L2$5:
; Line 1138
	jmp	SHORT $L1$3
$L3$4:
; Line 1139
	jmp	SHORT $L2$5
; Line 1140
	pop	ebp
	ret	0
_Infinite_Loop2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_Halts	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1131
	push	ebp
	mov	ebp, esp
; Line 1132
	xor	eax, eax
; Line 1133
	pop	ebp
	ret	0
_Halts	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_T$ = -4					; size = 4
_P$ = 8							; size = 4
_T	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1104
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1105
	push	OFFSET _T
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 1106
	mov	DWORD PTR _Address_of_T$[ebp], OFFSET _T
; Line 1107
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _code_end$[ebp], eax
; Line 1108
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _decoded$[ebp], eax
; Line 1110
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _master_state$[ebp], eax
; Line 1111
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_state$[ebp], eax
; Line 1112
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_stack$[ebp], eax
; Line 1113
	push	24000					; 00005dc0H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _execution_trace$[ebp], eax
; Line 1114
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	call	_Init_slave_state0
	add	esp, 16					; 00000010H
; Line 1115
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	push	OFFSET $SG10092
	call	_Output
	add	esp, 8
; Line 1116
	mov	eax, DWORD PTR _Address_of_T$[ebp]
	push	eax
	push	OFFSET $SG10093
	call	_Output
	add	esp, 8
; Line 1117
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Address_of_T$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoded$[ebp]
	push	ecx
	lea	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	push	OFFSET $SG10095
	call	_Decide_Halting0
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@T
; Line 1119
	jmp	SHORT $END_OF_CODE$4
$LN2@T:
; Line 1120
	xor	eax, eax
	jmp	SHORT $LN1@T
$END_OF_CODE$4:
; Line 1122
	push	OFFSET $SG10096
	call	_OutputString
	add	esp, 4
; Line 1123
	mov	eax, 1
$LN1@T:
; Line 1124
	mov	esp, ebp
	pop	ebp
	ret	0
_T	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_H0$ = -4					; size = 4
_P$ = 8							; size = 4
_H0	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1080
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1081
	push	OFFSET _H0
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 1082
	mov	DWORD PTR _Address_of_H0$[ebp], OFFSET _H0
; Line 1083
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _code_end$[ebp], eax
; Line 1084
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _decoded$[ebp], eax
; Line 1086
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _master_state$[ebp], eax
; Line 1087
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_state$[ebp], eax
; Line 1088
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_stack$[ebp], eax
; Line 1089
	push	24000					; 00005dc0H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _execution_trace$[ebp], eax
; Line 1090
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	call	_Init_slave_state0
	add	esp, 16					; 00000010H
; Line 1091
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	push	OFFSET $SG10061
	call	_Output
	add	esp, 8
; Line 1092
	mov	eax, DWORD PTR _Address_of_H0$[ebp]
	push	eax
	push	OFFSET $SG10062
	call	_Output
	add	esp, 8
; Line 1093
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Address_of_H0$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoded$[ebp]
	push	ecx
	lea	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	push	OFFSET $SG10064
	call	_Decide_Halting0
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@H0
; Line 1095
	jmp	SHORT $END_OF_CODE$4
$LN2@H0:
; Line 1096
	xor	eax, eax
	jmp	SHORT $LN1@H0
$END_OF_CODE$4:
; Line 1098
	push	OFFSET $SG10065
	call	_OutputString
	add	esp, 4
; Line 1099
	mov	eax, 1
$LN1@H0:
; Line 1100
	mov	esp, ebp
	pop	ebp
	ret	0
_H0	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_Kozen_K$ = -4				; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_Kozen_K PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1054
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1055
	push	OFFSET _H
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 1056
	mov	DWORD PTR _Address_of_Kozen_K$[ebp], OFFSET _Kozen_K
; Line 1057
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _code_end$[ebp], eax
; Line 1058
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _decoded$[ebp], eax
; Line 1060
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _master_state$[ebp], eax
; Line 1061
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_state$[ebp], eax
; Line 1062
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_stack$[ebp], eax
; Line 1063
	push	240000					; 0003a980H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _execution_trace$[ebp], eax
; Line 1066
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _I$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state
	add	esp, 20					; 00000014H
; Line 1067
	mov	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	push	OFFSET $SG10030
	call	_Output
	add	esp, 8
; Line 1068
	mov	ecx, DWORD PTR _Address_of_Kozen_K$[ebp]
	push	ecx
	push	OFFSET $SG10031
	call	_Output
	add	esp, 8
; Line 1069
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Address_of_Kozen_K$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _master_state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	push	OFFSET $SG10033
	call	_Decide_Halting
	add	esp, 40					; 00000028H
	test	eax, eax
	je	SHORT $LN2@Kozen_K
; Line 1072
	push	OFFSET $SG10034
	call	_OutputString
	add	esp, 4
; Line 1073
	mov	eax, 1
	jmp	SHORT $LN1@Kozen_K
$LN2@Kozen_K:
; Line 1075
	xor	eax, eax
$LN1@Kozen_K:
; Line 1076
	mov	esp, ebp
	pop	ebp
	ret	0
_Kozen_K ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_Sipser_H$ = -4				; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_Sipser_H PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1028
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1029
	push	OFFSET _H
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 1030
	mov	DWORD PTR _Address_of_Sipser_H$[ebp], OFFSET _Sipser_H
; Line 1031
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _code_end$[ebp], eax
; Line 1032
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _decoded$[ebp], eax
; Line 1034
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _master_state$[ebp], eax
; Line 1035
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_state$[ebp], eax
; Line 1036
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_stack$[ebp], eax
; Line 1037
	push	240000					; 0003a980H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _execution_trace$[ebp], eax
; Line 1040
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _I$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state
	add	esp, 20					; 00000014H
; Line 1041
	mov	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	push	OFFSET $SG9992
	call	_Output
	add	esp, 8
; Line 1042
	mov	ecx, DWORD PTR _Address_of_Sipser_H$[ebp]
	push	ecx
	push	OFFSET $SG9993
	call	_Output
	add	esp, 8
; Line 1043
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Address_of_Sipser_H$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _master_state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	push	OFFSET $SG9995
	call	_Decide_Halting
	add	esp, 40					; 00000028H
	test	eax, eax
	je	SHORT $LN2@Sipser_H
; Line 1046
	push	OFFSET $SG9996
	call	_OutputString
	add	esp, 4
; Line 1047
	mov	eax, 1
	jmp	SHORT $LN1@Sipser_H
$LN2@Sipser_H:
; Line 1049
	xor	eax, eax
$LN1@Sipser_H:
; Line 1050
	mov	esp, ebp
	pop	ebp
	ret	0
_Sipser_H ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_H$ = -4					; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_H	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 1002
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 1003
	push	OFFSET _H
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 1004
	mov	DWORD PTR _Address_of_H$[ebp], OFFSET _H
; Line 1005
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _code_end$[ebp], eax
; Line 1006
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _decoded$[ebp], eax
; Line 1008
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _master_state$[ebp], eax
; Line 1009
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_state$[ebp], eax
; Line 1010
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_stack$[ebp], eax
; Line 1011
	push	240000					; 0003a980H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _execution_trace$[ebp], eax
; Line 1014
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _I$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state
	add	esp, 20					; 00000014H
; Line 1015
	mov	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	push	OFFSET $SG9954
	call	_Output
	add	esp, 8
; Line 1016
	mov	ecx, DWORD PTR _Address_of_H$[ebp]
	push	ecx
	push	OFFSET $SG9955
	call	_Output
	add	esp, 8
; Line 1017
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Address_of_H$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _master_state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	push	OFFSET $SG9957
	call	_Decide_Halting
	add	esp, 40					; 00000028H
	test	eax, eax
	je	SHORT $LN2@H
; Line 1020
	push	OFFSET $SG9958
	call	_OutputString
	add	esp, 4
; Line 1021
	mov	eax, 1
	jmp	SHORT $LN1@H
$LN2@H:
; Line 1023
	xor	eax, eax
$LN1@H:
; Line 1024
	mov	esp, ebp
	pop	ebp
	ret	0
_H	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -32						; size = 4
_code_end$ = -28					; size = 4
_master_state$ = -24					; size = 4
_End_Of_Code$ = -20					; size = 4
_execution_trace$ = -16					; size = 4
_slave_state$ = -12					; size = 4
_slave_stack$ = -8					; size = 4
_Address_of_H1$ = -4					; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_H1	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 969
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 970
	push	OFFSET _H1
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 971
	mov	DWORD PTR _Address_of_H1$[ebp], OFFSET _H1
; Line 972
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_get_code_end
	add	esp, 4
	mov	DWORD PTR _code_end$[ebp], eax
; Line 973
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _decoded$[ebp], eax
; Line 975
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _master_state$[ebp], eax
; Line 976
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_state$[ebp], eax
; Line 977
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _slave_stack$[ebp], eax
; Line 978
	push	240000					; 0003a980H
	call	_Allocate
	add	esp, 4
	mov	DWORD PTR _execution_trace$[ebp], eax
; Line 980
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _I$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state
	add	esp, 20					; 00000014H
; Line 981
	mov	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	push	OFFSET $SG9916
	call	_Output
	add	esp, 8
; Line 982
	mov	ecx, DWORD PTR _Address_of_H1$[ebp]
	push	ecx
	push	OFFSET $SG9917
	call	_Output
	add	esp, 8
; Line 983
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Address_of_H1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _master_state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	push	OFFSET $SG9919
	call	_Decide_Halting
	add	esp, 40					; 00000028H
	test	eax, eax
	je	SHORT $LN2@H1
; Line 986
	push	OFFSET $SG9920
	call	_OutputString
	add	esp, 4
; Line 987
	mov	eax, 1
	jmp	SHORT $LN1@H1
$LN2@H1:
; Line 989
	xor	eax, eax
$LN1@H1:
; Line 990
	mov	esp, ebp
	pop	ebp
	ret	0
_H1	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -36						; size = 4
_code_end$ = -32					; size = 4
_master_state$ = -28					; size = 4
_Root$ = -24						; size = 4
_End_Of_Code$ = -20					; size = 4
_slave_state$ = -16					; size = 4
_slave_stack$ = -12					; size = 4
_execution_trace$ = -8					; size = 4
_Aborted$ = -4						; size = 4
_P$ = 8							; size = 4
_Address_of_Sipser_H PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 887
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 891
	jmp	SHORT $SKIP$4
$DATA1$5:
; Line 895
	npad	1
	npad	1
	npad	1
	npad	1
$DATA2$6:
; Line 908
	npad	1
	npad	1
	npad	1
	npad	1
$SKIP$4:
; Line 921
	lea	eax, OFFSET $DATA1$5
	mov	DWORD PTR _Aborted$[ebp], eax
	lea	eax, OFFSET $DATA2$6
	mov	DWORD PTR _execution_trace$[ebp], eax
	mov	eax, OFFSET $END_OF_CODE$7
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 942
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	lea	ecx, DWORD PTR _code_end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoded$[ebp]
	push	edx
	lea	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Aborted$[ebp]
	push	ecx
	call	_Init_Halts_HH
	add	esp, 32					; 00000020H
	mov	DWORD PTR _Root$[ebp], eax
; Line 947
	mov	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state0
	add	esp, 16					; 00000010H
; Line 949
	mov	eax, DWORD PTR _Root$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	lea	eax, DWORD PTR _master_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Aborted$[ebp]
	push	edx
	call	_Decide_Halting_HH
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@Address_of
; Line 952
	jmp	SHORT $END_OF_CODE$7
$LN2@Address_of:
; Line 954
	mov	eax, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 955
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 956
	xor	eax, eax
	jmp	SHORT $LN1@Address_of
$END_OF_CODE$7:
; Line 959
	mov	edx, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [edx], -1869574000		; 90909090H
; Line 960
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 961
	mov	eax, 1
$LN1@Address_of:
; Line 962
	mov	esp, ebp
	pop	ebp
	ret	0
_Address_of_Sipser_H ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -36						; size = 4
_code_end$ = -32					; size = 4
_master_state$ = -28					; size = 4
_Root$ = -24						; size = 4
_End_Of_Code$ = -20					; size = 4
_slave_state$ = -16					; size = 4
_slave_stack$ = -12					; size = 4
_execution_trace$ = -8					; size = 4
_Aborted$ = -4						; size = 4
_P$ = 8							; size = 4
_HHH	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 802
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 806
	jmp	SHORT $SKIP$4
$DATA1$5:
; Line 810
	npad	1
	npad	1
	npad	1
	npad	1
$DATA2$6:
; Line 823
	npad	1
	npad	1
	npad	1
	npad	1
$SKIP$4:
; Line 836
	lea	eax, OFFSET $DATA1$5
	mov	DWORD PTR _Aborted$[ebp], eax
	lea	eax, OFFSET $DATA2$6
	mov	DWORD PTR _execution_trace$[ebp], eax
	mov	eax, OFFSET $END_OF_CODE$7
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 857
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	lea	ecx, DWORD PTR _code_end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoded$[ebp]
	push	edx
	lea	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Aborted$[ebp]
	push	ecx
	call	_Init_Halts_HH
	add	esp, 32					; 00000020H
	mov	DWORD PTR _Root$[ebp], eax
; Line 862
	mov	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state0
	add	esp, 16					; 00000010H
; Line 863
	mov	eax, DWORD PTR _Root$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	lea	eax, DWORD PTR _master_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Aborted$[ebp]
	push	edx
	call	_Decide_Halting_HH
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@HHH
; Line 866
	jmp	SHORT $END_OF_CODE$7
$LN2@HHH:
; Line 868
	mov	eax, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 869
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 870
	xor	eax, eax
	jmp	SHORT $LN1@HHH
$END_OF_CODE$7:
; Line 873
	mov	edx, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [edx], -1869574000		; 90909090H
; Line 874
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 875
	mov	eax, 1
$LN1@HHH:
; Line 876
	mov	esp, ebp
	pop	ebp
	ret	0
_HHH	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -36						; size = 4
_code_end$ = -32					; size = 4
_master_state$ = -28					; size = 4
_Root$ = -24						; size = 4
_End_Of_Code$ = -20					; size = 4
_slave_state$ = -16					; size = 4
_slave_stack$ = -12					; size = 4
_execution_trace$ = -8					; size = 4
_Aborted$ = -4						; size = 4
_P$ = 8							; size = 4
_HHH1	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 726
	jmp	SHORT $SKIP$4
$DATA1$5:
; Line 730
	npad	1
	npad	1
	npad	1
	npad	1
$DATA2$6:
; Line 743
	npad	1
	npad	1
	npad	1
	npad	1
$SKIP$4:
; Line 756
	lea	eax, OFFSET $DATA1$5
	mov	DWORD PTR _Aborted$[ebp], eax
	lea	eax, OFFSET $DATA2$6
	mov	DWORD PTR _execution_trace$[ebp], eax
	mov	eax, OFFSET $END_OF_CODE$7
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 777
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	lea	ecx, DWORD PTR _code_end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoded$[ebp]
	push	edx
	lea	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Aborted$[ebp]
	push	ecx
	call	_Init_Halts_HH
	add	esp, 32					; 00000020H
	mov	DWORD PTR _Root$[ebp], eax
; Line 782
	mov	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_Init_slave_state0
	add	esp, 16					; 00000010H
; Line 783
	mov	eax, DWORD PTR _Root$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	lea	eax, DWORD PTR _master_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _code_end$[ebp]
	push	edx
	lea	eax, DWORD PTR _decoded$[ebp]
	push	eax
	lea	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Aborted$[ebp]
	push	edx
	call	_Decide_Halting_HH
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@HHH1
; Line 786
	jmp	SHORT $END_OF_CODE$7
$LN2@HHH1:
; Line 788
	mov	eax, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 789
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 790
	xor	eax, eax
	jmp	SHORT $LN1@HHH1
$END_OF_CODE$7:
; Line 793
	mov	edx, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [edx], -1869574000		; 90909090H
; Line 794
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 795
	mov	eax, 1
$LN1@HHH1:
; Line 796
	mov	esp, ebp
	pop	ebp
	ret	0
_HHH1	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -36						; size = 4
_code_end$ = -32					; size = 4
_master_state$ = -28					; size = 4
_Root$ = -24						; size = 4
_End_Of_Code$ = -20					; size = 4
_slave_state$ = -16					; size = 4
_slave_stack$ = -12					; size = 4
_execution_trace$ = -8					; size = 4
_Aborted$ = -4						; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_HH	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 644
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 648
	jmp	SHORT $SKIP$4
$DATA1$5:
; Line 652
	npad	1
	npad	1
	npad	1
	npad	1
$DATA2$6:
; Line 665
	npad	1
	npad	1
	npad	1
	npad	1
$SKIP$4:
; Line 678
	lea	eax, OFFSET $DATA1$5
	mov	DWORD PTR _Aborted$[ebp], eax
	lea	eax, OFFSET $DATA2$6
	mov	DWORD PTR _execution_trace$[ebp], eax
	mov	eax, OFFSET $END_OF_CODE$7
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 699
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	lea	ecx, DWORD PTR _code_end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoded$[ebp]
	push	edx
	lea	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Aborted$[ebp]
	push	ecx
	call	_Init_Halts_HH
	add	esp, 32					; 00000020H
	mov	DWORD PTR _Root$[ebp], eax
; Line 703
	mov	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_Init_slave_state
	add	esp, 20					; 00000014H
; Line 705
	mov	ecx, DWORD PTR _Root$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _master_state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _End_Of_Code$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoded$[ebp]
	push	ecx
	lea	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	lea	eax, DWORD PTR _Aborted$[ebp]
	push	eax
	call	_Decide_Halting_HH
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@HH
; Line 708
	jmp	SHORT $END_OF_CODE$7
$LN2@HH:
; Line 710
	mov	ecx, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 711
	mov	edx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [edx], -1869574000		; 90909090H
; Line 712
	xor	eax, eax
	jmp	SHORT $LN1@HH
$END_OF_CODE$7:
; Line 715
	mov	eax, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 716
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 717
	mov	eax, 1
$LN1@HH:
; Line 718
	mov	esp, ebp
	pop	ebp
	ret	0
_HH	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = -36						; size = 4
_code_end$ = -32					; size = 4
_master_state$ = -28					; size = 4
_Root$ = -24						; size = 4
_End_Of_Code$ = -20					; size = 4
_slave_state$ = -16					; size = 4
_slave_stack$ = -12					; size = 4
_execution_trace$ = -8					; size = 4
_Aborted$ = -4						; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_HH1	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 560
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 564
	jmp	SHORT $SKIP$4
$DATA1$5:
; Line 568
	npad	1
	npad	1
	npad	1
	npad	1
$DATA2$6:
; Line 581
	npad	1
	npad	1
	npad	1
	npad	1
$SKIP$4:
; Line 594
	lea	eax, OFFSET $DATA1$5
	mov	DWORD PTR _Aborted$[ebp], eax
	lea	eax, OFFSET $DATA2$6
	mov	DWORD PTR _execution_trace$[ebp], eax
	mov	eax, OFFSET $END_OF_CODE$7
	mov	DWORD PTR _End_Of_Code$[ebp], eax
; Line 615
	lea	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	lea	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _master_state$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	lea	ecx, DWORD PTR _code_end$[ebp]
	push	ecx
	lea	edx, DWORD PTR _decoded$[ebp]
	push	edx
	lea	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Aborted$[ebp]
	push	ecx
	call	_Init_Halts_HH
	add	esp, 32					; 00000020H
	mov	DWORD PTR _Root$[ebp], eax
; Line 619
	mov	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _End_Of_Code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	call	_Init_slave_state
	add	esp, 20					; 00000014H
; Line 621
	mov	ecx, DWORD PTR _Root$[ebp]
	push	ecx
	lea	edx, DWORD PTR _slave_stack$[ebp]
	push	edx
	lea	eax, DWORD PTR _slave_state$[ebp]
	push	eax
	lea	ecx, DWORD PTR _master_state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _End_Of_Code$[ebp]
	push	edx
	mov	eax, DWORD PTR _code_end$[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoded$[ebp]
	push	ecx
	lea	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	lea	eax, DWORD PTR _Aborted$[ebp]
	push	eax
	call	_Decide_Halting_HH
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN2@HH1
; Line 624
	jmp	SHORT $END_OF_CODE$7
$LN2@HH1:
; Line 626
	mov	ecx, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 627
	mov	edx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [edx], -1869574000		; 90909090H
; Line 628
	xor	eax, eax
	jmp	SHORT $LN1@HH1
$END_OF_CODE$7:
; Line 631
	mov	eax, DWORD PTR _Aborted$[ebp]
	mov	DWORD PTR [eax], -1869574000		; 90909090H
; Line 632
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR [ecx], -1869574000		; 90909090H
; Line 633
	mov	eax, 1
$LN1@HH1:
; Line 634
	mov	esp, ebp
	pop	ebp
	ret	0
_HH1	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Aborted$ = 8						; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_P$ = 24						; size = 4
_master_state$ = 28					; size = 4
_slave_state$ = 32					; size = 4
_slave_stack$ = 36					; size = 4
_Init_Halts_HH PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 532
	push	ebp
	mov	ebp, esp
; Line 533
	push	24					; 00000018H
	call	_Allocate
	add	esp, 4
	mov	ecx, DWORD PTR _decoded$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 534
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	call	_get_code_end
	add	esp, 4
	mov	ecx, DWORD PTR _code_end$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 535
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	edx, DWORD PTR _master_state$[ebp]
	mov	DWORD PTR [edx], eax
; Line 536
	push	52					; 00000034H
	call	_Allocate
	add	esp, 4
	mov	ecx, DWORD PTR _slave_state$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 537
	push	65536					; 00010000H
	call	_Allocate
	add	esp, 4
	mov	edx, DWORD PTR _slave_stack$[ebp]
	mov	DWORD PTR [edx], eax
; Line 538
	mov	eax, DWORD PTR _slave_stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG9774
	call	_Output
	add	esp, 8
; Line 539
	mov	edx, DWORD PTR _execution_trace$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], -1869574000		; 90909090H
	jne	SHORT $LN2@Init_Halts
; Line 542
	mov	ecx, DWORD PTR _Aborted$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0
; Line 543
	push	240000					; 0003a980H
	call	_Allocate
	add	esp, 4
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 544
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG9776
	call	_Output
	add	esp, 8
; Line 546
	mov	eax, 1
	jmp	SHORT $LN1@Init_Halts
$LN2@Init_Halts:
; Line 548
	xor	eax, eax
$LN1@Init_Halts:
; Line 549
	pop	ebp
	ret	0
_Init_Halts_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_address$1 = -20					; size = 4
_Current_Length_Of_Execution_Trace$ = -16		; size = 4
_size$2 = -12						; size = 4
_EIP$3 = -8						; size = 4
_aborted_temp$ = -4					; size = 4
_Aborted$ = 8						; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_End_Of_Code$ = 24					; size = 4
_master_state$ = 28					; size = 4
_slave_state$ = 32					; size = 4
_slave_stack$ = 36					; size = 4
_Root$ = 40						; size = 4
_Decide_Halting_HH PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 483
	mov	DWORD PTR _aborted_temp$[ebp], 0
; Line 484
	mov	DWORD PTR _Current_Length_Of_Execution_Trace$[ebp], 0
$LN2@Decide_Hal:
; Line 486
	cmp	DWORD PTR _aborted_temp$[ebp], 0
	jne	$LN3@Decide_Hal
; Line 488
	mov	eax, DWORD PTR _slave_state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _EIP$3[ebp], edx
; Line 489
	mov	eax, DWORD PTR _decoded$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _master_state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DebugStep
	add	esp, 12					; 0000000cH
; Line 493
	call	_Last_Address_Of_Operating_System
	cmp	DWORD PTR _EIP$3[ebp], eax
	jbe	SHORT $LN4@Decide_Hal
; Line 495
	push	24					; 00000018H
	mov	eax, DWORD PTR _decoded$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_PushBack
	add	esp, 12					; 0000000cH
$LN4@Decide_Hal:
; Line 499
	mov	edx, DWORD PTR _EIP$3[ebp]
	cmp	edx, DWORD PTR _code_end$[ebp]
	jne	SHORT $LN5@Decide_Hal
; Line 500
	mov	eax, 1
	jmp	SHORT $LN1@Decide_Hal
$LN5@Decide_Hal:
; Line 502
	cmp	DWORD PTR _Root$[ebp], 0
	je	SHORT $LN6@Decide_Hal
; Line 504
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _address$1[ebp], edx
; Line 505
	mov	eax, DWORD PTR _address$1[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _size$2[ebp], ecx
; Line 508
	mov	edx, DWORD PTR _size$2[ebp]
	cmp	edx, DWORD PTR _Current_Length_Of_Execution_Trace$[ebp]
	jbe	SHORT $LN6@Decide_Hal
; Line 510
	mov	eax, DWORD PTR _size$2[ebp]
	mov	DWORD PTR _Current_Length_Of_Execution_Trace$[ebp], eax
; Line 512
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Needs_To_Be_Aborted_HH
	add	esp, 4
	mov	DWORD PTR _aborted_temp$[ebp], eax
$LN6@Decide_Hal:
; Line 516
	jmp	$LN2@Decide_Hal
$LN3@Decide_Hal:
; Line 518
	cmp	DWORD PTR _aborted_temp$[ebp], 1
	jne	SHORT $LN8@Decide_Hal
; Line 519
	xor	eax, eax
	jmp	SHORT $LN1@Decide_Hal
$LN8@Decide_Hal:
; Line 520
	mov	eax, 1
$LN1@Decide_Hal:
; Line 521
	mov	esp, ebp
	pop	ebp
	ret	0
_Decide_Halting_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$ = -20						; size = 4
_size$ = -16						; size = 4
_ptr$ = -12						; size = 4
_Aborted$ = -8						; size = 4
_current$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_Needs_To_Be_Aborted_HH PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 455
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 456
	mov	DWORD PTR _Aborted$[ebp], 0
; Line 457
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 458
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 461
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 1
	mov	DWORD PTR _last$[ebp], eax
; Line 462
	imul	edx, DWORD PTR _last$[ebp], 24
	add	edx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _current$[ebp], edx
; Line 464
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 232			; 000000e8H
	jne	SHORT $LN2@Needs_To_B
; Line 465
	mov	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	call	_Needs_To_Be_Aborted_Trace_HH
	add	esp, 8
	mov	DWORD PTR _Aborted$[ebp], eax
	jmp	SHORT $LN3@Needs_To_B
$LN2@Needs_To_B:
; Line 466
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 235			; 000000ebH
	jne	SHORT $LN3@Needs_To_B
; Line 467
	mov	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	call	_Needs_To_Be_Aborted_Trace_HH
	add	esp, 8
	mov	DWORD PTR _Aborted$[ebp], eax
$LN3@Needs_To_B:
; Line 468
	mov	eax, DWORD PTR _Aborted$[ebp]
; Line 469
	mov	esp, ebp
	pop	ebp
	ret	0
_Needs_To_Be_Aborted_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -24					; size = 4
_size$ = -20						; size = 4
_ptr$ = -16						; size = 4
_Count_Conditional_Branch_Instructions$ = -12		; size = 4
_N$ = -8						; size = 4
_traced$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_Needs_To_Be_Aborted_Trace_HH PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 413
	mov	DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], 0
; Line 415
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 416
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 418
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 2
	mov	DWORD PTR _next2last$[ebp], eax
; Line 421
	mov	edx, DWORD PTR _next2last$[ebp]
	mov	DWORD PTR _N$[ebp], edx
	jmp	SHORT $LN4@Needs_To_B
$LN2@Needs_To_B:
	mov	eax, DWORD PTR _N$[ebp]
	sub	eax, 1
	mov	DWORD PTR _N$[ebp], eax
$LN4@Needs_To_B:
	cmp	DWORD PTR _N$[ebp], 0
	jl	$LN3@Needs_To_B
; Line 423
	imul	ecx, DWORD PTR _N$[ebp], 24
	add	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _traced$[ebp], ecx
; Line 426
	mov	edx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [edx+16], 127			; 0000007fH
	jne	SHORT $LN5@Needs_To_B
; Line 427
	mov	eax, DWORD PTR _Count_Conditional_Branch_Instructions$[ebp]
	add	eax, 1
	mov	DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], eax
$LN5@Needs_To_B:
; Line 429
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+16], 235			; 000000ebH
	jne	SHORT $LN6@Needs_To_B
; Line 430
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax]
	ja	SHORT $LN6@Needs_To_B
; Line 431
	mov	edx, DWORD PTR _traced$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN6@Needs_To_B
; Line 432
	cmp	DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], 0
	jne	SHORT $LN6@Needs_To_B
; Line 434
	push	OFFSET $SG9687
	call	_OutputString
	add	esp, 4
; Line 436
	mov	eax, 1
	jmp	SHORT $LN1@Needs_To_B
$LN6@Needs_To_B:
; Line 438
	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+16], 232			; 000000e8H
	jne	SHORT $LN10@Needs_To_B
; Line 439
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _traced$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN10@Needs_To_B
; Line 440
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _traced$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN10@Needs_To_B
; Line 441
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR _traced$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN10@Needs_To_B
; Line 442
	cmp	DWORD PTR _Count_Conditional_Branch_Instructions$[ebp], 0
	jne	SHORT $LN10@Needs_To_B
; Line 444
	push	OFFSET $SG9693
	call	_OutputString
	add	esp, 4
; Line 447
	mov	eax, 1
	jmp	SHORT $LN1@Needs_To_B
$LN10@Needs_To_B:
; Line 449
	jmp	$LN2@Needs_To_B
$LN3@Needs_To_B:
; Line 450
	xor	eax, eax
$LN1@Needs_To_B:
; Line 451
	mov	esp, ebp
	pop	ebp
	ret	0
_Needs_To_Be_Aborted_Trace_HH ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Top_of_Stack$ = -4					; size = 4
_P$ = 8							; size = 4
_I$ = 12						; size = 4
_End_Of_Code$ = 16					; size = 4
_slave_state$ = 20					; size = 4
_slave_stack$ = 24					; size = 4
_Init_slave_state PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 387
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 392
	mov	eax, DWORD PTR _I$[ebp]
	push	eax
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	call	_StackPush
	add	esp, 8
	mov	DWORD PTR _Top_of_Stack$[ebp], eax
; Line 393
	mov	edx, DWORD PTR _End_Of_Code$[ebp]
	push	edx
	mov	eax, DWORD PTR _slave_stack$[ebp]
	push	eax
	call	_StackPush
	add	esp, 8
	mov	DWORD PTR _Top_of_Stack$[ebp], eax
; Line 395
	mov	ecx, DWORD PTR _slave_state$[ebp]
	push	ecx
	call	_SaveState
	add	esp, 4
; Line 399
	mov	edx, DWORD PTR _slave_state$[ebp]
	mov	eax, DWORD PTR _P$[ebp]
	mov	DWORD PTR [edx], eax
; Line 400
	mov	ecx, DWORD PTR _slave_state$[ebp]
	mov	edx, DWORD PTR _Top_of_Stack$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 401
	mov	eax, DWORD PTR _slave_state$[ebp]
	mov	ecx, DWORD PTR _Top_of_Stack$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 402
	mov	esp, ebp
	pop	ebp
	ret	0
_Init_slave_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_EIP$1 = -8						; size = 4
_Aborted$ = -4						; size = 4
_Halt_Decider_Name$ = 8					; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_master_state$ = 24					; size = 4
_slave_state$ = 28					; size = 4
_slave_stack$ = 32					; size = 4
_Address_of_H$ = 36					; size = 4
_P$ = 40						; size = 4
_I$ = 44						; size = 4
_Decide_Halting PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 351
	mov	DWORD PTR _Aborted$[ebp], 0
$LN2@Decide_Hal:
; Line 352
	cmp	DWORD PTR _Aborted$[ebp], 0
	jne	SHORT $LN3@Decide_Hal
; Line 354
	mov	eax, DWORD PTR _slave_state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _EIP$1[ebp], edx
; Line 355
	mov	eax, DWORD PTR _decoded$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _master_state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DebugStep
	add	esp, 12					; 0000000cH
; Line 356
	mov	eax, DWORD PTR _EIP$1[ebp]
	cmp	eax, DWORD PTR _code_end$[ebp]
	jne	SHORT $LN4@Decide_Hal
; Line 357
	mov	eax, 1
	jmp	$LN1@Decide_Hal
$LN4@Decide_Hal:
; Line 364
	push	24					; 00000018H
	mov	ecx, DWORD PTR _decoded$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_PushBack
	add	esp, 12					; 0000000cH
; Line 365
	mov	edx, DWORD PTR _I$[ebp]
	push	edx
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Address_of_H$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Needs_To_Be_Aborted
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Aborted$[ebp], eax
; Line 367
	jmp	SHORT $LN2@Decide_Hal
$LN3@Decide_Hal:
; Line 368
	cmp	DWORD PTR _Aborted$[ebp], 0
	je	SHORT $LN5@Decide_Hal
; Line 370
	mov	ecx, DWORD PTR _Halt_Decider_Name$[ebp]
	push	ecx
	call	_OutputString
	add	esp, 4
; Line 371
	cmp	DWORD PTR _Aborted$[ebp], 1
	jne	SHORT $LN6@Decide_Hal
; Line 372
	push	OFFSET $SG9645
	call	_OutputString
	add	esp, 4
$LN6@Decide_Hal:
; Line 373
	cmp	DWORD PTR _Aborted$[ebp], 2
	jne	SHORT $LN7@Decide_Hal
; Line 374
	push	OFFSET $SG9647
	call	_OutputString
	add	esp, 4
$LN7@Decide_Hal:
; Line 375
	cmp	DWORD PTR _Aborted$[ebp], 3
	jne	SHORT $LN8@Decide_Hal
; Line 376
	push	OFFSET $SG9649
	call	_OutputString
	add	esp, 4
$LN8@Decide_Hal:
; Line 378
	xor	eax, eax
	jmp	SHORT $LN1@Decide_Hal
$LN5@Decide_Hal:
; Line 380
	mov	eax, 1
$LN1@Decide_Hal:
; Line 381
	mov	esp, ebp
	pop	ebp
	ret	0
_Decide_Halting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$ = -20						; size = 4
_size$ = -16						; size = 4
_ptr$ = -12						; size = 4
_Aborted$ = -8						; size = 4
_current$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_Address_of_H$ = 12					; size = 4
_P$ = 16						; size = 4
_I$ = 20						; size = 4
_Needs_To_Be_Aborted PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 317
	mov	DWORD PTR _Aborted$[ebp], 0
; Line 318
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 319
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 321
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 1
	mov	DWORD PTR _last$[ebp], eax
; Line 322
	imul	edx, DWORD PTR _last$[ebp], 24
	add	edx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _current$[ebp], edx
; Line 324
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 232			; 000000e8H
	jne	SHORT $LN2@Needs_To_B
; Line 326
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _Address_of_H$[ebp]
	jne	SHORT $LN4@Needs_To_B
; Line 327
	mov	eax, DWORD PTR _I$[ebp]
	push	eax
	mov	ecx, DWORD PTR _P$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current$[ebp]
	push	edx
	mov	eax, DWORD PTR _execution_trace$[ebp]
	push	eax
	call	_Infinite_Simulation_Needs_To_Be_Aborted_Trace
	add	esp, 16					; 00000010H
	mov	DWORD PTR _Aborted$[ebp], eax
	jmp	SHORT $LN5@Needs_To_B
$LN4@Needs_To_B:
; Line 330
	mov	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	call	_Infinite_Recursion_Needs_To_Be_Aborted_Trace
	add	esp, 8
	mov	DWORD PTR _Aborted$[ebp], eax
$LN5@Needs_To_B:
; Line 332
	jmp	SHORT $LN3@Needs_To_B
$LN2@Needs_To_B:
; Line 333
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 235			; 000000ebH
	jne	SHORT $LN3@Needs_To_B
; Line 334
	mov	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	call	_Infinite_Loop_Needs_To_Be_Aborted_Trace
	add	esp, 8
	mov	DWORD PTR _Aborted$[ebp], eax
$LN3@Needs_To_B:
; Line 335
	mov	eax, DWORD PTR _Aborted$[ebp]
; Line 336
	mov	esp, ebp
	pop	ebp
	ret	0
_Needs_To_Be_Aborted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -32					; size = 4
_size$ = -28						; size = 4
_ptr$ = -24						; size = 4
_Conditional_Branch_Count$ = -20			; size = 4
_Count_PUSH_Instructions$ = -16				; size = 4
_N$ = -12						; size = 4
_Num_PUSH_Matched$ = -8					; size = 4
_traced$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_P$ = 16						; size = 4
_I$ = 20						; size = 4
_Infinite_Simulation_Needs_To_Be_Aborted_Trace PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 281
	mov	DWORD PTR _Count_PUSH_Instructions$[ebp], 0
; Line 282
	mov	DWORD PTR _Num_PUSH_Matched$[ebp], 0
; Line 283
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 285
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 286
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 287
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 2
	mov	DWORD PTR _next2last$[ebp], eax
; Line 290
	mov	edx, DWORD PTR _next2last$[ebp]
	mov	DWORD PTR _N$[ebp], edx
	jmp	SHORT $LN4@Infinite_S
$LN2@Infinite_S:
	mov	eax, DWORD PTR _N$[ebp]
	sub	eax, 1
	mov	DWORD PTR _N$[ebp], eax
$LN4@Infinite_S:
	cmp	DWORD PTR _N$[ebp], 0
	jl	$LN3@Infinite_S
; Line 292
	imul	ecx, DWORD PTR _N$[ebp], 24
	add	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _traced$[ebp], ecx
; Line 293
	mov	edx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [edx+16], 127			; 0000007fH
	jne	SHORT $LN5@Infinite_S
; Line 294
	mov	eax, DWORD PTR _Conditional_Branch_Count$[ebp]
	add	eax, 1
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_S:
; Line 296
	mov	ecx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [ecx+16], 104			; 00000068H
	jne	SHORT $LN6@Infinite_S
; Line 297
	mov	edx, DWORD PTR _Count_PUSH_Instructions$[ebp]
	add	edx, 1
	mov	DWORD PTR _Count_PUSH_Instructions$[ebp], edx
$LN6@Infinite_S:
; Line 300
	mov	eax, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [eax+16], 104			; 00000068H
	jne	SHORT $LN7@Infinite_S
	mov	ecx, DWORD PTR _traced$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _P$[ebp]
	jne	SHORT $LN7@Infinite_S
	cmp	DWORD PTR _Count_PUSH_Instructions$[ebp], 1
	jne	SHORT $LN7@Infinite_S
; Line 301
	mov	eax, DWORD PTR _Num_PUSH_Matched$[ebp]
	add	eax, 1
	mov	DWORD PTR _Num_PUSH_Matched$[ebp], eax
$LN7@Infinite_S:
; Line 304
	mov	ecx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [ecx+16], 104			; 00000068H
	jne	SHORT $LN8@Infinite_S
	mov	edx, DWORD PTR _traced$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _I$[ebp]
	jne	SHORT $LN8@Infinite_S
	cmp	DWORD PTR _Count_PUSH_Instructions$[ebp], 2
	jne	SHORT $LN8@Infinite_S
; Line 305
	mov	ecx, DWORD PTR _Num_PUSH_Matched$[ebp]
	add	ecx, 1
	mov	DWORD PTR _Num_PUSH_Matched$[ebp], ecx
$LN8@Infinite_S:
; Line 307
	cmp	DWORD PTR _Num_PUSH_Matched$[ebp], 2
	jne	SHORT $LN9@Infinite_S
	cmp	DWORD PTR _N$[ebp], 0
	jne	SHORT $LN9@Infinite_S
	cmp	DWORD PTR _Conditional_Branch_Count$[ebp], 0
	jne	SHORT $LN9@Infinite_S
; Line 308
	mov	eax, 3
	jmp	SHORT $LN1@Infinite_S
$LN9@Infinite_S:
; Line 309
	jmp	$LN2@Infinite_S
$LN3@Infinite_S:
; Line 310
	xor	eax, eax
$LN1@Infinite_S:
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	0
_Infinite_Simulation_Needs_To_Be_Aborted_Trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Size$ = -12						; size = 4
_Capacity$ = -8						; size = 4
_Top_of_Stack$ = -4					; size = 4
_P$ = 8							; size = 4
_End_Of_Code$ = 12					; size = 4
_slave_state$ = 16					; size = 4
_slave_stack$ = 20					; size = 4
_Init_slave_state0 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 265
	mov	eax, DWORD PTR _End_Of_Code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _slave_stack$[ebp]
	push	ecx
	call	_StackPush
	add	esp, 8
	mov	DWORD PTR _Top_of_Stack$[ebp], eax
; Line 266
	mov	edx, DWORD PTR _slave_state$[ebp]
	push	edx
	call	_SaveState
	add	esp, 4
; Line 267
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _slave_stack$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _Capacity$[ebp], eax
; Line 268
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _slave_stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 270
	mov	edx, DWORD PTR _slave_state$[ebp]
	mov	eax, DWORD PTR _P$[ebp]
	mov	DWORD PTR [edx], eax
; Line 271
	mov	ecx, DWORD PTR _slave_state$[ebp]
	mov	edx, DWORD PTR _Top_of_Stack$[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 272
	mov	eax, DWORD PTR _slave_state$[ebp]
	mov	ecx, DWORD PTR _Top_of_Stack$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 273
	mov	esp, ebp
	pop	ebp
	ret	0
_Init_slave_state0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_EIP$1 = -8						; size = 4
_Aborted$ = -4						; size = 4
_Halt_Decider_Name$ = 8					; size = 4
_execution_trace$ = 12					; size = 4
_decoded$ = 16						; size = 4
_code_end$ = 20						; size = 4
_master_state$ = 24					; size = 4
_slave_state$ = 28					; size = 4
_slave_stack$ = 32					; size = 4
_Address_of_H$ = 36					; size = 4
_P$ = 40						; size = 4
_Decide_Halting0 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 228
	mov	DWORD PTR _Aborted$[ebp], 0
$LN2@Decide_Hal:
; Line 229
	cmp	DWORD PTR _Aborted$[ebp], 0
	jne	SHORT $LN3@Decide_Hal
; Line 231
	mov	eax, DWORD PTR _slave_state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _EIP$1[ebp], edx
; Line 232
	mov	eax, DWORD PTR _decoded$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _slave_state$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _master_state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DebugStep
	add	esp, 12					; 0000000cH
; Line 233
	mov	eax, DWORD PTR _EIP$1[ebp]
	cmp	eax, DWORD PTR _code_end$[ebp]
	jne	SHORT $LN4@Decide_Hal
; Line 234
	mov	eax, 1
	jmp	$LN1@Decide_Hal
$LN4@Decide_Hal:
; Line 239
	push	24					; 00000018H
	mov	ecx, DWORD PTR _decoded$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_PushBack
	add	esp, 12					; 0000000cH
; Line 240
	mov	edx, DWORD PTR _P$[ebp]
	push	edx
	mov	eax, DWORD PTR _Address_of_H$[ebp]
	push	eax
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Needs_To_Be_Aborted0
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Aborted$[ebp], eax
; Line 241
	jmp	SHORT $LN2@Decide_Hal
$LN3@Decide_Hal:
; Line 242
	cmp	DWORD PTR _Aborted$[ebp], 0
	je	SHORT $LN5@Decide_Hal
; Line 244
	mov	eax, DWORD PTR _Halt_Decider_Name$[ebp]
	push	eax
	call	_OutputString
	add	esp, 4
; Line 245
	cmp	DWORD PTR _Aborted$[ebp], 1
	jne	SHORT $LN6@Decide_Hal
; Line 246
	push	OFFSET $SG9542
	call	_OutputString
	add	esp, 4
$LN6@Decide_Hal:
; Line 247
	cmp	DWORD PTR _Aborted$[ebp], 2
	jne	SHORT $LN7@Decide_Hal
; Line 248
	push	OFFSET $SG9544
	call	_OutputString
	add	esp, 4
$LN7@Decide_Hal:
; Line 249
	cmp	DWORD PTR _Aborted$[ebp], 3
	jne	SHORT $LN8@Decide_Hal
; Line 250
	push	OFFSET $SG9546
	call	_OutputString
	add	esp, 4
$LN8@Decide_Hal:
; Line 251
	xor	eax, eax
	jmp	SHORT $LN1@Decide_Hal
$LN5@Decide_Hal:
; Line 253
	mov	eax, 1
$LN1@Decide_Hal:
; Line 254
	mov	esp, ebp
	pop	ebp
	ret	0
_Decide_Halting0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$ = -20						; size = 4
_size$ = -16						; size = 4
_ptr$ = -12						; size = 4
_Aborted$ = -8						; size = 4
_current$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_Address_of_H$ = 12					; size = 4
_P$ = 16						; size = 4
_Needs_To_Be_Aborted0 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 196
	mov	DWORD PTR _Aborted$[ebp], 0
; Line 197
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 198
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 199
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 1
	mov	DWORD PTR _last$[ebp], eax
; Line 200
	imul	edx, DWORD PTR _last$[ebp], 24
	add	edx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _current$[ebp], edx
; Line 203
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 232			; 000000e8H
	jne	SHORT $LN2@Needs_To_B
; Line 205
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _Address_of_H$[ebp]
	jne	SHORT $LN4@Needs_To_B
; Line 206
	mov	eax, DWORD PTR _P$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execution_trace$[ebp]
	push	edx
	call	_Infinite_Simulation_Needs_To_Be_Aborted_Trace0
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _Aborted$[ebp], eax
	jmp	SHORT $LN5@Needs_To_B
$LN4@Needs_To_B:
; Line 208
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	call	_Infinite_Recursion_Needs_To_Be_Aborted_Trace
	add	esp, 8
	mov	DWORD PTR _Aborted$[ebp], eax
$LN5@Needs_To_B:
; Line 209
	jmp	SHORT $LN3@Needs_To_B
$LN2@Needs_To_B:
; Line 210
	mov	edx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [edx+16], 235			; 000000ebH
	jne	SHORT $LN3@Needs_To_B
; Line 211
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _execution_trace$[ebp]
	push	ecx
	call	_Infinite_Loop_Needs_To_Be_Aborted_Trace
	add	esp, 8
	mov	DWORD PTR _Aborted$[ebp], eax
$LN3@Needs_To_B:
; Line 212
	mov	eax, DWORD PTR _Aborted$[ebp]
; Line 213
	mov	esp, ebp
	pop	ebp
	ret	0
_Needs_To_Be_Aborted0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -32					; size = 4
_size$ = -28						; size = 4
_ptr$ = -24						; size = 4
_Conditional_Branch_Count$ = -20			; size = 4
_Num_PUSH_Matched$ = -16				; size = 4
_Count_PUSH_Instructions$ = -12				; size = 4
_traced$ = -8						; size = 4
_N$1 = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_P$ = 16						; size = 4
_Infinite_Simulation_Needs_To_Be_Aborted_Trace0 PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 166
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 168
	mov	DWORD PTR _Count_PUSH_Instructions$[ebp], 0
; Line 169
	mov	DWORD PTR _Num_PUSH_Matched$[ebp], 0
; Line 170
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 172
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 173
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 174
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 2
	mov	DWORD PTR _next2last$[ebp], eax
; Line 175
	mov	edx, DWORD PTR _next2last$[ebp]
	mov	DWORD PTR _N$1[ebp], edx
	jmp	SHORT $LN4@Infinite_S
$LN2@Infinite_S:
	mov	eax, DWORD PTR _N$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _N$1[ebp], eax
$LN4@Infinite_S:
	cmp	DWORD PTR _N$1[ebp], 0
	jl	SHORT $LN3@Infinite_S
; Line 177
	imul	ecx, DWORD PTR _N$1[ebp], 24
	add	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _traced$[ebp], ecx
; Line 178
	mov	edx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [edx+16], 127			; 0000007fH
	jne	SHORT $LN5@Infinite_S
; Line 179
	mov	eax, DWORD PTR _Conditional_Branch_Count$[ebp]
	add	eax, 1
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_S:
; Line 181
	mov	ecx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [ecx+16], 104			; 00000068H
	jne	SHORT $LN6@Infinite_S
; Line 182
	mov	edx, DWORD PTR _Count_PUSH_Instructions$[ebp]
	add	edx, 1
	mov	DWORD PTR _Count_PUSH_Instructions$[ebp], edx
$LN6@Infinite_S:
; Line 184
	mov	eax, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [eax+16], 104			; 00000068H
	jne	SHORT $LN7@Infinite_S
	mov	ecx, DWORD PTR _traced$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _P$[ebp]
	jne	SHORT $LN7@Infinite_S
	cmp	DWORD PTR _Count_PUSH_Instructions$[ebp], 1
	jne	SHORT $LN7@Infinite_S
; Line 185
	mov	eax, DWORD PTR _Num_PUSH_Matched$[ebp]
	add	eax, 1
	mov	DWORD PTR _Num_PUSH_Matched$[ebp], eax
$LN7@Infinite_S:
; Line 187
	cmp	DWORD PTR _Num_PUSH_Matched$[ebp], 1
	jne	SHORT $LN8@Infinite_S
	cmp	DWORD PTR _N$1[ebp], 0
	jne	SHORT $LN8@Infinite_S
	cmp	DWORD PTR _Conditional_Branch_Count$[ebp], 0
	jne	SHORT $LN8@Infinite_S
; Line 188
	mov	eax, 3
	jmp	SHORT $LN1@Infinite_S
$LN8@Infinite_S:
; Line 189
	jmp	SHORT $LN2@Infinite_S
$LN3@Infinite_S:
; Line 190
	xor	eax, eax
$LN1@Infinite_S:
; Line 191
	mov	esp, ebp
	pop	ebp
	ret	0
_Infinite_Simulation_Needs_To_Be_Aborted_Trace0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -24					; size = 4
_size$ = -20						; size = 4
_ptr$ = -16						; size = 4
_Conditional_Branch_Count$ = -12			; size = 4
_traced$ = -8						; size = 4
_N$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_Infinite_Recursion_Needs_To_Be_Aborted_Trace PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 139
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 141
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 142
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 143
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 2
	mov	DWORD PTR _next2last$[ebp], eax
; Line 146
	mov	edx, DWORD PTR _next2last$[ebp]
	mov	DWORD PTR _N$[ebp], edx
	jmp	SHORT $LN4@Infinite_R
$LN2@Infinite_R:
	mov	eax, DWORD PTR _N$[ebp]
	sub	eax, 1
	mov	DWORD PTR _N$[ebp], eax
$LN4@Infinite_R:
	cmp	DWORD PTR _N$[ebp], 0
	jl	SHORT $LN3@Infinite_R
; Line 148
	imul	ecx, DWORD PTR _N$[ebp], 24
	add	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _traced$[ebp], ecx
; Line 149
	mov	edx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [edx+16], 127			; 0000007fH
	jne	SHORT $LN5@Infinite_R
; Line 150
	mov	eax, DWORD PTR _Conditional_Branch_Count$[ebp]
	add	eax, 1
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_R:
; Line 152
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+16], 232			; 000000e8H
	jne	SHORT $LN6@Infinite_R
; Line 153
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _traced$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN6@Infinite_R
; Line 154
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _traced$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN6@Infinite_R
; Line 155
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _traced$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN6@Infinite_R
; Line 156
	cmp	DWORD PTR _Conditional_Branch_Count$[ebp], 0
	jne	SHORT $LN6@Infinite_R
; Line 157
	mov	eax, 2
	jmp	SHORT $LN1@Infinite_R
$LN6@Infinite_R:
; Line 158
	jmp	SHORT $LN2@Infinite_R
$LN3@Infinite_R:
; Line 159
	xor	eax, eax
$LN1@Infinite_R:
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	0
_Infinite_Recursion_Needs_To_Be_Aborted_Trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next2last$ = -24					; size = 4
_size$ = -20						; size = 4
_ptr$ = -16						; size = 4
_traced$ = -12						; size = 4
_Conditional_Branch_Count$ = -8				; size = 4
_N$ = -4						; size = 4
_execution_trace$ = 8					; size = 4
_current$ = 12						; size = 4
_Infinite_Loop_Needs_To_Be_Aborted_Trace PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 113
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], 0
; Line 115
	mov	eax, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 116
	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _size$[ebp], ecx
; Line 117
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	sub	eax, 2
	mov	DWORD PTR _next2last$[ebp], eax
; Line 120
	mov	edx, DWORD PTR _next2last$[ebp]
	mov	DWORD PTR _N$[ebp], edx
	jmp	SHORT $LN4@Infinite_L
$LN2@Infinite_L:
	mov	eax, DWORD PTR _N$[ebp]
	sub	eax, 1
	mov	DWORD PTR _N$[ebp], eax
$LN4@Infinite_L:
	cmp	DWORD PTR _N$[ebp], 0
	jl	SHORT $LN3@Infinite_L
; Line 122
	imul	ecx, DWORD PTR _N$[ebp], 24
	add	ecx, DWORD PTR _execution_trace$[ebp]
	mov	DWORD PTR _traced$[ebp], ecx
; Line 123
	mov	edx, DWORD PTR _traced$[ebp]
	cmp	DWORD PTR [edx+16], 127			; 0000007fH
	jne	SHORT $LN5@Infinite_L
; Line 124
	mov	eax, DWORD PTR _Conditional_Branch_Count$[ebp]
	add	eax, 1
	mov	DWORD PTR _Conditional_Branch_Count$[ebp], eax
$LN5@Infinite_L:
; Line 126
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [ecx+16], 235			; 000000ebH
	jne	SHORT $LN6@Infinite_L
; Line 127
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax]
	ja	SHORT $LN6@Infinite_L
; Line 128
	mov	edx, DWORD PTR _traced$[ebp]
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN6@Infinite_L
; Line 129
	cmp	DWORD PTR _Conditional_Branch_Count$[ebp], 0
	jne	SHORT $LN6@Infinite_L
; Line 130
	mov	eax, 1
	jmp	SHORT $LN1@Infinite_L
$LN6@Infinite_L:
; Line 131
	jmp	SHORT $LN2@Infinite_L
$LN3@Infinite_L:
; Line 132
	xor	eax, eax
$LN1@Infinite_L:
; Line 133
	mov	esp, ebp
	pop	ebp
	ret	0
_Infinite_Loop_Needs_To_Be_Aborted_Trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size$ = -8						; size = 4
_N$1 = -4						; size = 4
_source$ = 8						; size = 4
_destination$ = 12					; size = 4
_CopyMachineCode PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 95
	mov	DWORD PTR _size$[ebp], 0
	jmp	SHORT $LN4@CopyMachin
$LN2@CopyMachin:
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
$LN4@CopyMachin:
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 204				; 000000ccH
	je	SHORT $LN3@CopyMachin
; Line 96
	jmp	SHORT $LN2@CopyMachin
$LN3@CopyMachin:
; Line 97
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_Allocate
	add	esp, 4
	mov	ecx, DWORD PTR _destination$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 98
	mov	DWORD PTR _N$1[ebp], 0
	jmp	SHORT $LN7@CopyMachin
$LN5@CopyMachin:
	mov	edx, DWORD PTR _N$1[ebp]
	add	edx, 1
	mov	DWORD PTR _N$1[ebp], edx
$LN7@CopyMachin:
	mov	eax, DWORD PTR _N$1[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN6@CopyMachin
; Line 100
	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, DWORD PTR _N$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	push	OFFSET $SG9419
	call	_Output
	add	esp, 8
; Line 101
	mov	eax, DWORD PTR _N$1[ebp]
	mov	ecx, DWORD PTR _destination$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR _N$1[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
; Line 102
	jmp	SHORT $LN5@CopyMachin
$LN6@CopyMachin:
; Line 103
	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _destination$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+edx], ecx
; Line 104
	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _destination$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	push	OFFSET $SG9420
	call	_Output
	add	esp, 8
; Line 105
	mov	ecx, 4
	imul	edx, ecx, -2
	mov	eax, DWORD PTR _destination$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	push	OFFSET $SG9421
	call	_Output
	add	esp, 8
; Line 106
	mov	esp, ebp
	pop	ebp
	ret	0
_CopyMachineCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_decoded$ = 8						; size = 4
_Output_Decoded PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 88
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_Output_Decoded ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Last_Address_Of_Operating_System PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 87
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
_Last_Address_Of_Operating_System ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_EIP$ = 8						; size = 4
_get_code_end PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 86
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
_get_code_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_S$ = 8							; size = 4
_M$ = 12						; size = 4
_StackPush PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 85
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
_StackPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_stdvector$ = 8						; size = 4
_data_ptr$ = 12						; size = 4
_size_in_bytes$ = 16					; size = 4
_PushBack PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 84
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_PushBack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_master_state$ = 8					; size = 4
_slave_state$ = 12					; size = 4
_decoded$ = 16						; size = 4
_DebugStep PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 83
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
_DebugStep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_state$ = 8						; size = 4
_LoadState PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 81
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_LoadState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_state$ = 8						; size = 4
_SaveState PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 80
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_SaveState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size$ = 8						; size = 4
_Allocate PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 79
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	0
_Allocate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_S$ = 8							; size = 4
_N$ = 12						; size = 4
_Output	PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 78
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_Output	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_S$ = 8							; size = 4
_OutputString PROC
; File d:\__hp_stream\__nlu_notes\__work_in_progress\__halt_decider_x86\___x86utm_vs\halt7.c
; Line 77
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
_OutputString ENDP
_TEXT	ENDS
END
